# Be sure to clear out sym_incoming_batch before each test or 
# turn incoming.batches.record.ok.enabled=false.
# Otherwise, when a new test starts and batch IDs are reused, the server thinks it has already received
# the batch and will not load the data.

# Test script to use
grinder.script=loadtest.py

# The number of worker processes the agent should start.
grinder.processes=1

# The number of worker threads that each worker process spawns.
grinder.threads=5

# The number of runs of the test script each thread performs. 0 means "run forever".
grinder.runs=0

# The maximum length of time in milliseconds that each worker process should run for.
# Either meeting grinder.duration or grinder.runs will cause the test to end.
grinder.duration=120000

# List of channels to push (comma separated).
# There should be a file called {channel.name}.csv for each channel listed here.
channel.names=heartbeat

# Delay in milliseconds after running the push and pull tests for a node
time.between.sync.ms=10000

# Number of batches to create for each channel during push. 
max.number.of.batches=1

# Max number of rows to put into each batch, specified per channel.
# It will randomly choose a number between 1 and max.
max.number.of.in.batch.heartbeat=1

# Starting batch ID to use.  Otherwise, make sure to delete from sym_incoming_batch before running.
batch.id.start=300000

# Whether to append a 3-digit workstation number to the location.
locations.use.workstation=false

# Assign a comma-separated list of node IDs to each agent and process ID.
locations.agent.id.0.process.id.0=00001,00002,00003
locations.agent.id.1.process.id.0=00004,00005,00006
locations.agent.id.2.process.id.0=00007,00008,00009

# Server node to push/pull with 
target.node.id=server
server.url=http://localhost:31415
server.path=/sync/server

# Client node security token, found in sym_node_security
server.auth.token=test
